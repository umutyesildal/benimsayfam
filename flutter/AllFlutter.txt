Bölüm 6 EP1 :

Stateless widget yaratmak için stless yazıp enter'a bas.
Hot reload stateless widget içinde çalışır.

	EP2 :

SafeArea widget'ı içinde bulunanları sadece telefonun görünen kısmına taşır.
margin köşelerden uzaklaşması,EdgeInsets. metodu ile kullanılır.

margin: EdgeInsets.all(20.0) köşelerden 20 pixel uzaklaştırıyor.
margin: EdgeInsets.symmetric(vertical: 50.0, horizontal: 10.0),
Yukardan 50 yandan 10 pixel uzaklaştırıyor.

Flutter Inspector'dan debug paint basarak görebilirsiniz.

padding, container içindekini container köşelerinden uzaklaştırması.

padding: EdgeInsets.all(20.0)

	EP3 :

Column'un birden fazla çocuğu olduğu için children: <Widget>[] olarak kullanılır

verticalDirection: VerticalDirection.up aşağıdan yukarı sıralar.

mainAxisAlignment: konteynırlar arasındaki boşluklar ve yerlerini belirler.
mainAxisAlignment: MainAxisAlignment:spaceBetween konteynırları dağıtır.

crossAxisAlignment aynı boyutta olmayan konteynırların yerini ayarlar.
crossAxisAlignment: CrossAxisAlignment.stretch hepsini aynı boyuta getirir.

konteynırları double.infinity yaparsan sonsuza kadar gider.

	EP4 :
image eklerken dosyadaysa AssetImage,internetteyse NetworkImage

	EP5 :

font eklerken indir sonra pubspec.yaml a göre ayarla family ismi olur.

letterSpacing harfler arasındaki boşluğu pixel olarak ayarlar.

materialpalette.com 'dan renklerin birbiriyle bağlantısı ve ikonları görebilirsin.

Containerda arada boşluk bırakmak için SizedBox kullan.

	EP 6:
Container yerine Card widget'ı kullanılabilir.
ListTile kullanılırsa bir ikon ve text kullanılır.


BÖLÜM 7 EP2 :

Overflow olmaması için image çok büyükse, width veya height değiştirilebilir.
Expanded class, erişilebilir yere class içindekileri yerleştirir.

        Expanded(
          child: Image(
            image: AssetImage('images/dice1.png'),
          ),
        ),



2 tane expanded varsa flex kullanılırsa belli katta yer kullanır.

        Expanded(
          flex: 2, // 2 katı
          child: Image(
            image: AssetImage('images/dice1.png'),
          ),
        ),
        Expanded(
          child: Image(
            image: AssetImage('images/dice1.png'),
          ),
        ),


EP3 :

Flutter outline ile (yandaki tuşlar) bir şeyleri center,row,column ile sarabilirsin.

padding ile sararsan padding yapılamayan kısımları da ayarlanır.


EP4 :

Flat Button dümdüz buton işte. eğer flatbutton içine başka bir widget koyarsan
buton o olur.

RaisedButton, elevated button gibi.Hovering on pressed kısımları da var.

EP5 :

var değişkeni ne olursa olsun bir tür için tanımlanır ama sonra değiştirilemez.


Text içine yazılıcaksa + ile değil $ ile yapılır.

State'i değişen bir widget'a yani hareketli widget'lar için stateful widget kullanılır

stateful widgetlarda setstate() ile state değiştirilebilir.


Xylophone app 

kütüphane eklerken başta pub dartlang sitesinden bul, dependency al ve importla !!!


Destini alternatif hikaye 

bir obje oluşturulucaksa  StoryBrain storyBrain = StoryBrain(); bu şekilde


BMI CALCULATOR

Flutter themes : material design dan cıkıp başka şekillerde yapmak için kullanılır
theme: ThemeData( çok fazla widget var kullanılabilecek )

Tema başta da ayarlanabilir ama her icon buton her şeyin kendi temasını da değiştirebiliriz


Genel olarak 1den fazla ekranı olan uygulamalarda, main'de tema olur ve diğer widgetlar çağırılır.
her sayfa için farklı bir dart dosyası açılır ve oralara yazılır.

Köşeleri düzgün yapmak istiyorsan, decoration: BoxDecoration( borderRadius: BorderRadius.circular(10.0))

row içinde column ya da column içinde row için children içinde expanded oluştur içinde child row oluştur.içinde expanded xd

1) REFACTOR WIDGETS:

Eğer hayvani derecede aynı widget'ı kullanıyorsan, git refactorle.Aynı widget'ı başka bir yerde oluştur ve yerinde kullan.

class ReusableCard extends StatelessWidget {
  const ReusableCard({
    Key key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.all(15.0),
      decoration: BoxDecoration(
        color: Color(0xFF1D1E33),
        borderRadius: BorderRadius.circular(10.0),
      ),
    );
  }
}

Daha kolayı için flutter outline(sağda yatay 2.) ve widgetı seçip extract de.


widget'ın içinde değişebilecek bir şeyler kullanıyorsan mesela renk gibi,bunu kullanılırken variable olarak isteyebilirsin.

bunun için final veri tipinde bir renk oluştururuz.

final Color colour;

veriyi colour olarak adlandırdık ve color: Color(0xFF1D1E33) yerine colour yazabiliriz.


class ReusableCard extends StatelessWidget {
  ReusableCard({@required this.colour});

  final Color colour;

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.all(15.0),
      decoration: BoxDecoration(
        color: colour,
        borderRadius: BorderRadius.circular(10.0),
      ),
    );
  }
}

bunun içine bir tane daha koymak istersek 

class IconContent extends StatelessWidget {
  IconContent({this.ikoncan, this.label});


  final IconData ikoncan;
  final String label;


  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        Icon(
          ikoncan,
          color: Colors.white,
          size: 80.0,
        ),
        SizedBox(
          height: 15.0,
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 18.0,
            fontWeight: FontWeight.bold,
            color: Color(0xFF8D8E98),
          ),
        )
      ],
    );
  }
}


Flatbutton bazen container'ın şekilini bozar o yüzden gestureDetector de kullanılabilir.


ENUMS : 

boolean'ın fazla versiyonlusu.birkaç şeyi taglemek için kullanılıyor.

enum CardType {
  male,
  female
}



TERNARY :

çok kaliteli bi şey bu öğrennnn

FUNCTIONS AS FIRST ORDER OBJECTS:

bu da cok iyiiiiiiiiiiiiiiiiiiiiiii




Slider Widget :

bildiğin sağa sola çekme çok kolay 

                     Slider(
                      value: height.toDouble(),
                      min: 140.0,
                      max: 220.0,
                      activeColor: Color(0xFFEB1555),
                      inactiveColor: Color(0xFF8D8E98),
                      onChanged: (double newValue){
                        setState(() {
                          height = newValue.round();
                        });
                      },
                    ),


Slider'ları iyi ayarlamak için SliderTheme kullanılabilir.

                      data: SliderTheme.of(context).copyWith(
                        activeTrackColor: Colors.white,
                        thumbColor: Color(0xFFEB1555),
                        overlayColor: Color(0x15EB1555),
                        thumbShape: RoundSliderThumbShape(enabledThumbRadius: 15.0),
                        overlayShape: RoundSliderOverlayShape(overlayRadius: 30.0),
                      ),

FloatingActionButton yerine kendi widgetımızı yarattık aq olaya bak 

class RoundIconButton extends StatelessWidget {
  RoundIconButton({@required this.ikon,this.xd});

  final Function xd;
  final IconData ikon;

  @override
  Widget build(BuildContext context) {
    return RawMaterialButton(
      child: Icon(ikon,
      color: Colors.white,),
      onPressed: xd,
      elevation: 6.0,
      disabledElevation: 6.0,
      constraints: BoxConstraints.tightFor(
        width: 56.0,
        height: 56.0,
      ),
      shape: CircleBorder(),
      fillColor: Color(0xFF4C4F5E),
    );
  }
}

floating action buttondan constraints'i aldık sadece.

Maps and Routes : 

route bir kere oluşturur ve daha sonra heryerde kullanabilirsin örnek :

routes : { 
	'/': (context) => Screen0();
	'/first': (context) => Screen1();
	'/second': (context) => Screen2();
}

daha başka yerlerde bunları kullanmak için sadece Navigator.pushNamed(context, '/first') kullanılabilir.
